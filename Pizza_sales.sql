CREATE DATABASE pizza_sales;
USE pizza_sales;

SELECT * FROM pizza_sales_data;

-- Check for null values
SELECT 
  SUM(order_details_id IS NULL) AS null_order_details_id,
  SUM(order_id IS NULL) AS null_order_id,
  SUM(pizza_id IS NULL) AS null_pizza_id,
  SUM(quantity IS NULL) AS null_quantity,
  SUM(order_date IS NULL) AS null_order_date,
  SUM(order_time IS NULL) AS null_order_time,
  SUM(unit_price IS NULL) AS null_unit_price,
  SUM(total_price IS NULL) AS null_total_price,
  SUM(pizza_size IS NULL) AS null_pizza_size,
  SUM(pizza_category IS NULL) AS null_pizza_category,
  SUM(pizza_ingredients IS NULL) AS null_pizza_ingredients,
  SUM(pizza_name IS NULL) AS null_pizza_name
FROM pizza_sales_data;


-- Check if any order_details_id appears more than once
-- Each order_details_id should be unique, so duplicates here would be a problem
SELECT order_details_id, COUNT(*) AS dup_count
FROM pizza_sales_data
GROUP BY order_details_id
HAVING COUNT(*) > 1;


-- Check sample values and data types of order_date and order_time
SELECT 
  order_date, 
  order_time 
FROM pizza_sales_data
LIMIT 10;


-- Create a view with additional time-based fields for easier analysis
CREATE OR REPLACE VIEW pizza_sales_analysis AS
SELECT 
    *,
    DAYNAME(order_date) AS day_name,          
    MONTHNAME(order_date) AS month_name,      
    HOUR(order_time) AS hour_of_day           
FROM pizza_sales_data;


-- Count total orders for each day
SELECT 
    day_name,
    COUNT(DISTINCT order_id) AS total_orders
FROM pizza_sales_analysis
GROUP BY day_name
ORDER BY total_orders DESC; 
-- Friday has the highest orders; Sunday the lowest. 
-- Suggest restocking/promotions on Sunday and staffing focus on Fridays.


-- Count total orders placed during each hour
SELECT 
    hour_of_day,
    COUNT(DISTINCT order_id) AS total_orders
FROM pizza_sales_analysis
GROUP BY hour_of_day
ORDER BY total_orders DESC; 
-- Peak Hours: 12–14 (Lunch), 17–19 (Dinner)
-- Low Activity: Before 11 AM and After 21 PM
-- Action: Staff more during peaks, run promos during quiet hours


-- Top 10 most ordered pizzas by quantity
SELECT 
    pizza_name,
    SUM(quantity) AS total_quantity_sold
FROM pizza_sales_analysis
GROUP BY pizza_name
ORDER BY total_quantity_sold DESC
LIMIT 10;
-- Top sellers include chicken and classic meat pizzas.
-- Suggest ensuring high stock & spotlighting these items in marketing.


-- Least ordered pizzas
SELECT 
    pizza_name,
    SUM(quantity) AS total_quantity_sold
FROM pizza_sales_analysis
GROUP BY pizza_name
ORDER BY total_quantity_sold ASC
LIMIT 10;
-- Low performers include pesto, spinach & veggie-based pizzas.
-- Consider menu redesign, bundling, or targeted promotions.


-- Average order value across all orders
SELECT 
    ROUND(SUM(total_price) / COUNT(DISTINCT order_id), 2) AS avg_order_value
FROM pizza_sales_analysis;
-- AOV is $38.31 — useful for setting pricing benchmarks and measuring campaign ROI


-- Average Order Value by Day of Week
SELECT 
    day_name,
    ROUND(SUM(total_price) / COUNT(DISTINCT order_id), 2) AS avg_order_value
FROM pizza_sales_analysis
GROUP BY day_name
ORDER BY FIELD(day_name, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');
-- Saturday has the highest AOV ($39.01), Sunday the lowest ($37.81) — promote upselling on low-spend days


-- Total revenue generated by each pizza size
SELECT 
    pizza_size,
    ROUND(SUM(total_price), 2) AS total_revenue
FROM pizza_sales_analysis
GROUP BY pizza_size
ORDER BY total_revenue DESC;
-- Large pizzas contribute the most to revenue, XXL the least.
-- Focus promotions and inventory around L, M, and S sizes.


-- Total revenue generated by each pizza category
SELECT 
    pizza_category,
    ROUND(SUM(total_price), 2) AS total_revenue
FROM pizza_sales_analysis
GROUP BY pizza_category
ORDER BY total_revenue DESC;
-- Classic and Supreme pizzas lead revenue; Veggie performs lowest.
-- Focus on premium pricing and spotlight Classic combos in marketing.


-- Check how many distinct years exist in the data
SELECT DISTINCT YEAR(order_date) AS year
FROM pizza_sales_analysis
ORDER BY year;

-- Total revenue generated each month
SELECT 
    month_name,
    ROUND(SUM(total_price), 2) AS total_revenue
FROM pizza_sales_analysis
GROUP BY month_name
ORDER BY FIELD(month_name, 
  'January','February','March','April','May','June',
  'July','August','September','October','November','December');  
-- July saw the highest revenue; October the lowest.
-- Consider launching promotions or campaigns in low-performing months.


-- Total sales revenue from all orders
SELECT 
    ROUND(SUM(total_price), 2) AS total_revenue
FROM pizza_sales_analysis;
-- Total Revenue in 2015: $817,860.05


-- Total quantity of pizzas sold
SELECT 
    SUM(quantity) AS total_pizzas_sold
FROM pizza_sales_analysis;
-- Total pizzas sold in 2015: 49,574


-- Total number of distinct customer orders
SELECT 
    COUNT(DISTINCT order_id) AS total_orders
FROM pizza_sales_analysis;
-- Total orders placed in 2015: 21,350 (distinct order IDs)










